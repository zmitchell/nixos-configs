# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:
let
    bootHelpers = pkgs.callPackage ../command_sets/boot.nix {};
in
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" "thunderbolt" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  # Necessary for profiling
  boot.kernel.sysctl = {
    "perf_event_paranoid" = 1;
    "perf_event_mlock_kb" = 2048;
  };

  # Extra boot settings
  boot.loader.timeout = 0; # we have scripts for booting

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # Enable hardware acceleration of various things
  hardware.graphics.extraPackages = with pkgs; [
    intel-ocl
    intel-media-driver
    intel-vaapi-driver
  ];

  environment.systemPackages = with pkgs; [
    config.boot.kernelPackages.perf
    linuxHeaders
    unstable.bpftrace
    fwupd
    discord
    _1password-gui
  ] ++ [
    bootHelpers
  ];
  services.fwupd.enable = true;

  environment.localBinInPath = true;

  # Otherwise it often fails during switch
  systemd.services.NetworkManager-wait-online.enable = false;

  # Custom modules
  generic_desktop = {
    enable = true;
  };
  gnome.enable = true;
  populate_authorized_keys.enable = true;
  nix_community_cachix.enable = true;

}
