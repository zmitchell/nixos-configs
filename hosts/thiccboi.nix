# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, pkgs-unstable, modulesPath, ... }:
let
    bootHelpers = pkgs.callPackage ../command_sets/boot.nix {};
    unstable-pkgs = with pkgs-unstable; [
      logseq
    ];
    stable-pkgs = with pkgs; [
      sublime-merge
    ];
    other-pkgs = [
      bootHelpers
    ];
in
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  # Extra boot settings
  boot.loader.timeout = 0; # we have scripts for booting

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp11s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # GPU settings
  hardware.opengl.driSupport = true;
  hardware.opengl.driSupport32Bit = true;
  services.xserver.videoDrivers = ["nvidia"];
  hardware.nvidia = {
    modesetting.enable = true;
    powerManagement.enable = false;
    powerManagement.finegrained = false;
    open = false;
    nvidiaSettings = true;
    package = config.boot.kernelPackages.nvidiaPackages.production;
  };
  hardware.opengl.extraPackages = with pkgs; [
    nvidia-vaapi-driver
    nvidia-system-monitor-qt
  ];
  
  environment.systemPackages = with pkgs; [
    vscode
  ];

  # User packages for this host
  users.users.zmitchell.packages = unstable-pkgs ++ stable-pkgs ++ other-pkgs;
    
  # Pre-populate SSH keys from other machines
  #users.users.zmitchell.openssh.authorizedKeys.keys = pkgs.lib.attrValues (
  #  pkgs.lib.filterAttrs (k: v: k != "thiccboi") (import ../data/keys.nix));
}
