# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ lib, pkgs, modulesPath, host, user, ... }:
{
  imports = [
      (modulesPath + "/installer/scan/not-detected.nix")
      (modulesPath + "/profiles/qemu-guest.nix")
    ];


  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;

  boot.initrd.availableKernelModules = [ "ahci" "virtio_pci" "virtio_scsi" "xhci_pci" "thunderbolt" "nvme" "usbhid" "usb_storage" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

  # Enable hardware acceleration of various things
  hardware.graphics.extraPackages = with pkgs; [
    intel-ocl
    intel-media-driver
    intel-vaapi-driver
  ];

  # Pre-populate SSH keys from other machines
  users.users.${user.username}.openssh.authorizedKeys.keys = pkgs.lib.attrValues (
    pkgs.lib.filterAttrs (k: v: k != host) (import ../data/keys.nix));

  # Hetzner machine uses legacy boot
  boot.loader.grub = {
    enable = true;
    configurationLimit = 50;
    efiSupport = true;
    efiInstallAsRemovable = true;
  };

  # Custom modules
  generic_server.enable = true;
}
